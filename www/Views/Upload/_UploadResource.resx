<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonUpload" xml:space="preserve">
    <value>btn-upload-e</value>
  </data>
  <data name="ButtonUploadAlt" xml:space="preserve">
    <value>Upload now!</value>
  </data>
  <data name="filebutton" xml:space="preserve">
    <value>filebutton</value>
  </data>
  <data name="Intro" xml:space="preserve">
    <value>Before you submit here are a few important things to remember:</value>
  </data>
  <data name="LabelCaption" xml:space="preserve">
    <value>Title of Video or Photo Caption</value>
  </data>
  <data name="LabelConcent19" xml:space="preserve">
    <value>I confirm that I have permission to publish from all individual(s) 19 years of age or older who are appearing in my Video or Photo.</value>
  </data>
  <data name="LabelConcentGuardian" xml:space="preserve">
    <value>I confirm that I am the parent or legal guardian of all individual(s) 18 years of age or younger who are appearing in my Video or Photo.</value>
  </data>
  <data name="LabelDescription" xml:space="preserve">
    <value>If your Video or Photo was taken &lt;strong&gt;outside the Moncton area&lt;/strong&gt;, complete the following sentence in 50 words or less (English or French), “My Moncton Moment is…”</value>
  </data>
  <data name="LabelFile" xml:space="preserve">
    <value>Click “Browse” to select your file</value>
  </data>
  <data name="LabelLocation" xml:space="preserve">
    <value>If your Video or Photo was taken &lt;strong&gt;in the Moncton area&lt;/strong&gt; please tell us where it was taken, i.e. Main St.</value>
  </data>
  <data name="PageTitle" xml:space="preserve">
    <value>Ready to upload your favourite Moncton Moment VIDEO or PHOTO?</value>
  </data>
  <data name="RequiredFields" xml:space="preserve">
    <value>* Denotes Required Field</value>
  </data>
  <data name="Step1" xml:space="preserve">
    <value>Read the &lt;a href="/facebook/monctonMomentsSubmission/Home/RulesPopUp" class="rulesPopUp"&gt;Official Rules&lt;/a&gt; – (Section 4 is particularly interesting, it’s all about submission rules and requirements).</value>
  </data>
  <data name="Step2" xml:space="preserve">
    <value>Make sure your video or photo is the correct format and does not exceed 250MB.</value>
  </data>
  <data name="Step3" xml:space="preserve">
    <value>Your submitted Video or Photo will be posted on Facebook for the public to view. Check out the &lt;a href="/facebook/monctonMomentsSubmission/Home/RulesPopUp" class="rulesPopUp"&gt;Official Rules&lt;/a&gt; on this one if you’re not clear.</value>
  </data>
  <data name="ValidationCaption" xml:space="preserve">
    <value>Title of Video or Photo Caption  is required.</value>
  </data>
  <data name="ValidationConcent19" xml:space="preserve">
    <value>Permission to publish from all individual(s) is required.</value>
  </data>
  <data name="ValidationConcentGuardian" xml:space="preserve">
    <value>Parent or legal guardian concent is required.</value>
  </data>
  <data name="ValidationFile" xml:space="preserve">
    <value>A file is required.</value>
  </data>
  <data name="Help_Formats" xml:space="preserve">
    <value>*Photo formats:&lt;br /&gt;
*Video Formats: wmv, 3gp, avi, mov, mp4, mpeg/mpegs, flv ,swf, mkv or webm</value>
  </data>
  <data name="Help_Step1" xml:space="preserve">
    <value>&lt;strong&gt;Step 1:&lt;/strong&gt; &lt;br /&gt;Capture your video* &lt;br /&gt;(45-90 sec. MAX) or photo.</value>
  </data>
  <data name="Help_Step2" xml:space="preserve">
    <value>&lt;strong&gt;Step 2:&lt;/strong&gt; &lt;br /&gt;Upload your video or &lt;br /&gt;photo to your computer.</value>
  </data>
  <data name="Help_Step3" xml:space="preserve">
    <value>&lt;strong&gt;Step 3:&lt;/strong&gt; &lt;br /&gt;Submit your video or photo &lt;br /&gt;on this Moncton Moments Facebook app.</value>
  </data>
  <data name="Help_Title" xml:space="preserve">
    <value>How to upload</value>
  </data>
  <data name="LabelCityIn" xml:space="preserve">
    <value>Location In Moncton</value>
  </data>
  <data name="LabelCityOut" xml:space="preserve">
    <value>Area Outside Moncton Area (see Official Rules for details)</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="Step4" xml:space="preserve">
    <value>How to upload</value>
  </data>
  <data name="ValidationLocation" xml:space="preserve">
    <value>Location is required.</value>
  </data>
</root>